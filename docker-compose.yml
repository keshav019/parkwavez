<<<<<<< HEAD
version: '3.8'
services:
  #API Gateway
  api-gateway:
    container_name: api-gateway
    build: api-gateway/
    restart: always
    ports:
      - "8004:8004"
    depends_on:
      - eureka-server
    environment:
      - EUREKA_CLIENT_SERVICEuRL_DEFAULTZONE=http://eureka-server:8761/eureka/

  #Eureka server
  eureka-server:
    container_name: eureka-server
    build: eureka-server/
    restart: always
=======
# version: "3"
# services:
#   api-gateway:
#     container_name: api-gateway
#     build: api-gateway/
#     restart: always
#     ports:
#       - "8004:8004"
#     depends_on:
#       - eureka-server
#     environment:
#       - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka/

#   eureka-server:
#     container_name: eureka-server
#     build: eureka-server/
#     restart: always
#     ports:
#       - "8761:8761"

#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.0.1
#     container_name: zookeeper
#     restart: always
#     ports:
#       - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000

#   broker:
#     image: confluentinc/cp-kafka:7.0.1
#     container_name: broker
#     restart: always
#     ports:
#       - "9092:9092"
#     depends_on:
#       - zookeeper
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

#   elasticsearch-service:
#     container_name: elasticsearch
#     image: elasticsearch:7.17.12
#     ports:
#       - "9200:9200"
#     environment:
#       - cluster.name=elasticsearch
#       - 'CLI_JAVA_OPTS=-Xms2g -Xmx2g'
#       - 'bootstrap.memory_lock=true'
#       - 'discovery.type=single-node'
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1

#   parking-provider-service:
#     container_name: parking-provider-service
#     build: parking-provider-service/
#     restart: always
#     ports:
#       - "8085:8085"
#     environment:
#       - spring.data.elasticsearch.cluster-nodes=elasticsearch-service:9200
#       - spring.data.elasticsearch.cluster-name=elasticsearch
#       - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka/
#       - spring.kafka.producer.bootstrap-servers=broker:9092
#     depends_on:
#       - eureka-server
#       - elasticsearch-service
#       - api-gateway
#       - broker

#   mysql-service:
#     container_name: mysql-server
#     image: mysql
#     ports:
#       - "3307:3306"
#     environment:
#       MYSQL_ROOT_PASSWORD: root
#       MYSQL_DATABASE: orders
#       MYSQL_USER: root
#       MYSQL_PASSWORD: 12345

#   authentication-service:
#     container_name: authentication-service
#     build: UserAuthenticationManagementApplication/
#     ports:
#       - "8090:8090"
#     environment:
#       - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka/
#       - spring.datasource.password=12345
#       - spring.datasource.username=root
#       - spring.datasource.url=jdbc:mysql://mysql-service:3306/demo
#       - spring.kafka.producer.bootstrap-servers=broker:9092
#     depends_on:
#       - eureka-server
#       - mysql-service
#       - broker

#   payment-service:
#     container_name: payment-service
#     build: payment-service/
#     restart: always
#     ports:
#       - "8087:8087"
#     environment:
#       - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka/
#       - spring.datasource.password=12345
#       - spring.datasource.username=root
#       - spring.datasource.url=jdbc:mysql://mysql-service:3307/orders
#     depends_on:
#       - eureka-server
#       - mysql-service

services:

  mysql:
    container_name: mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    networks:
      parkwavez-net:


  mongodb:
    container_name: mongodb
    image: mongo:latest
>>>>>>> a6ac9579272b131f65976c585d710df67d431256
    ports:
      - "27018:27017"
    networks:
      parkwavez-net:


  payment-mysql:
    container_name: payment-mysql
    image: mysql:latest
    restart: always
    ports:
      - "3301:3301"
    environment:
      MYSQL_ROOT_PASSWORD: mysql@123
      MYSQL_DATABASE: orders
    networks:
      - mynetwork

  payment-service:
    container_name: payment-service
    build: payment-service/
    restart: always
    ports:
      - "8087:8087"
    depends_on:
      - payment-mysql
      - eureka-server
      - api-gateway
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://payment-mysql:3301/orders?autoReconnect=true&useSSL=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=mysql@123
      - EUREKA_CLIENT_SERVICEuRL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - mynetwork

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
<<<<<<< HEAD
      - mynetwork
=======
      parkwavez-net:
>>>>>>> a6ac9579272b131f65976c585d710df67d431256


  kafka:
    image: confluentinc/cp-kafka:7.0.1
<<<<<<< HEAD
    container_name: broker
=======
    container_name: kafka
    restart: always
>>>>>>> a6ac9579272b131f65976c585d710df67d431256
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
<<<<<<< HEAD
      - mynetwork

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
=======
      parkwavez-net:


  elasticsearch:
>>>>>>> a6ac9579272b131f65976c585d710df67d431256
    container_name: elasticsearch
    environment:
      - cluster.name=elasticsearch
<<<<<<< HEAD
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - mynetwork
=======
      - 'CLI_JAVA_OPTS=-Xms2g -Xmx2g'
      - 'bootstrap.memory_lock=true'
      - 'discovery.type=single-node'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      parkwavez-net:


  api-gateway:
    container_name: api-gateway
    build: api-gateway/
    restart: always
    ports:
      - "8004:8004"
    depends_on:
      - eureka-server
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:


  bot-service:
    container_name: bot-service
    build: custom-bot-service/
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:


  eureka-server:
    container_name: eureka-server
    build: eureka-server/
    restart: always
    ports:
      - "8761:8761"
    networks:
      parkwavez-net:


  notification-service:
    container_name: notification-service
    build: notification-service/
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      - mongodb
      - kafka
      - eureka-server
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:

>>>>>>> a6ac9579272b131f65976c585d710df67d431256

  parking-provider-service:
    container_name: parking-provider-service
    build: parking-provider-service/
    ports:
      - "8085:8085"
<<<<<<< HEAD
    depends_on:
      - eureka-server
      - api-gateway
      - elasticsearch
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ELASTICSEARCH_URL=elasticsearch:9200
      - SPRING_DATA_ELASTICSEARCH_CLUSTERNODES=elasticsearch:9200
      - SPRING_DATA_ELASTICSEARCH_CLUSTERNAME=elasticsearch
      - SPRING_KAFKA_BOOTSTRAPSERVERS=broker:29092
      - EUREKA_CLIENT_SERVICEuRL_DEFAULTZONE=http://eureka-server:8761/eureka/
    restart: always
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
=======
    environment:
      - spring.profiles.active=docker
    links:
      - elasticsearch
    depends_on:
      - eureka-server
      - elasticsearch
      - api-gateway
      - kafka
    networks:
      parkwavez-net:


  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - mysql
      - eureka-server
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:
    restart: on-failure

  product-webapp:
    container_name: product-webapp
    build: product-webapp
    ports:
      - "8099:8099"
    depends_on:
      - eureka-server
    restart: on-failure
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:


  review-service:
    container_name: review-service
    build: review-service/
    restart: always
    ports:
      - "8089:8089"
    depends_on:
      - mongodb
      - kafka
      - eureka-server
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:


  user-authentication-service:
    container_name: user-authentication-service
    build: user-authentication-management/
    ports:
      - "8090:8090"
    depends_on:
      - mysql
      - eureka-server
      - kafka
    environment:
      - spring.profiles.active=docker
    networks:
      parkwavez-net:
    restart: on-failure

networks:
  parkwavez-net:
>>>>>>> a6ac9579272b131f65976c585d710df67d431256
